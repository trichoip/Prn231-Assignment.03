@page "{id:int?}"
@model EStore.WebClient.Pages.Products.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="editForm">
            <div class="form-group">
                <label for="ProductName" class="control-label">ProductName</label>
                <input type="text" id="ProductName" class="form-control" />
            </div>
            <div class="form-group">
                <label for="Weight" class="control-label">Weight</label>
                <input type="text" id="Weight" class="form-control" />
            </div>
            <div class="form-group">
                <label for="UnitPrice" class="control-label">UnitPrice</label>
                <input type="number" id="UnitPrice" class="form-control" />
            </div>
            <div class="form-group">
                <label for="UnitsInStock" class="control-label">UnitsInStock</label>
                <input type="number" id="UnitsInStock" class="form-control" />
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" id="IsDeleted" /> IsDeleted
                </label>
            </div>
            <div class="form-group">
                <label for="CategoryId" class="control-label">Category</label>
                <select id="CategoryId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="./Index">Back to List</a>
</div>

<script>
    const currentPath = window.location.pathname;
    const productIdMatch = currentPath.match(/\/Products\/Edit\/(\d+)/);
    const productId = productIdMatch ? parseInt(productIdMatch[1], 10) : null;

    if (productId) {
        Promise.all([
            fetch(`https://localhost:7285/api/Products/${productId}`)
                .then(response => {

                    if (!response.ok) {
                        alert(`product ${productId} not found`);
                        console.error('Error fetching data:', response.status);
                        window.location.href = 'https://localhost:7084/Products/Index';
                    }

                    return response.json();
                }),

            fetch('https://localhost:7285/api/Categories').then(response => response.json())
        ])
            .then(([product, categories]) => {
                document.getElementById('ProductName').value = product.productName;
                document.getElementById('Weight').value = product.weight;
                document.getElementById('UnitPrice').value = product.unitPrice;
                document.getElementById('UnitsInStock').value = product.unitsInStock;
                document.getElementById('IsDeleted').checked = product.isDeleted;

                const categoryIdSelect = document.getElementById('CategoryId');
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.categoryId;
                    option.textContent = category.categoryName;
                    categoryIdSelect.appendChild(option);
                });

                categoryIdSelect.value = product.categoryId;
            })
            .catch(error => console.error('Error fetching data:', error));

        document.getElementById('editForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const ProductName = document.getElementById('ProductName').value;
            const Weight = document.getElementById('Weight').value;
            const UnitPrice = document.getElementById('UnitPrice').value;
            const UnitsInStock = document.getElementById('UnitsInStock').value;
            const IsDeleted = document.getElementById('IsDeleted').checked;
            const CategoryId = document.getElementById('CategoryId').value;

            fetch(`https://localhost:7285/api/Products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId: productId,
                    productName: ProductName,
                    weight: Weight,
                    unitPrice: parseFloat(UnitPrice),
                    unitsInStock: parseInt(UnitsInStock),
                    isDeleted: IsDeleted,
                    categoryId: parseInt(CategoryId)
                }),
            })
                .then(response => {
                    if (response.ok) {
                        alert(`product ${productId} updated successfully.`);
                        console.log('Product updated successfully.');
                        window.location.href = 'https://localhost:7084/Products/Index';
                    } else {
                        console.error('Error updating product:', response.statusText);
                    }
                })
                .catch(error => console.error('Error updating product:', error));
        });
    } else {
        console.error('Invalid productId in the URL.');
    }
</script>